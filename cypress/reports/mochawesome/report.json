{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2024-05-23T03:37:15.658Z",
    "end": "2024-05-23T03:37:16.683Z",
    "duration": 1025,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "40b907d7-255d-42eb-bdcc-02b923881d22",
      "title": "",
      "fullFile": "cypress/e2e/apitest/apimulationtest.cy.js",
      "file": "cypress/e2e/apitest/apimulationtest.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7d6114f9-6487-4d23-8d20-a326822c8a1f",
          "title": "GraphQL Countries API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Creates a new country and verifies it exists",
              "fullTitle": "GraphQL Countries API Creates a new country and verifies it exists",
              "timedOut": null,
              "duration": 959,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.readFile('cypress/fixtures/createCountryMutation.graphql').then(query => {\n  cy.request({\n    method: 'POST',\n    url: _graphqlconfig.GRAPHQL_URL,\n    body: JSON.stringify({\n      query\n    }),\n    headers: _graphqlconfig.GRAPHQL_HEADERS\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('data');\n    const country = response.body.data.createCountry;\n    // Assert new country details\n    expect(country).to.have.property('code', 'AB');\n    expect(country).to.have.property('name', 'Testcountry');\n    expect(country).to.have.property('native', 'Testnative');\n    expect(country).to.have.property('capital', 'Testcapital');\n    expect(country).to.have.property('currency', 'TST');\n    expect(country).to.have.property('languages').that.is.an('array').with.length(1);\n    expect(country.languages[0]).to.have.property('code', 'TL');\n    expect(country.languages[0]).to.have.property('name', 'Testlang');\n    expect(country).to.have.property('continent');\n    expect(country.continent).to.have.property('code', 'EU');\n    expect(country.continent).to.have.property('name', 'TestEU');\n  });\n});\n// Verify the country was created by querying it\ncy.readFile('cypress/fixtures/countryByCodeQuery.graphql').then(query => {\n  const variables = {\n    code: \"AB\"\n  };\n  cy.request({\n    method: 'POST',\n    url: _graphqlconfig.GRAPHQL_URL,\n    body: JSON.stringify({\n      query,\n      variables\n    }),\n    headers: _graphqlconfig.GRAPHQL_HEADERS\n  }).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body).to.have.property('data');\n    const country = response.body.data.country;\n    // Assert the created country details\n    expect(country).to.have.property('code', 'AB');\n    expect(country).to.have.property('name', 'Testcountry');\n    expect(country).to.have.property('native', 'Testnative');\n    expect(country).to.have.property('capital', 'Testcapital');\n    expect(country).to.have.property('currency', 'TST');\n    expect(country).to.have.property('languages').that.is.an('array').with.length(1);\n    expect(country.languages[0]).to.have.property('code', 'TL');\n    expect(country.languages[0]).to.have.property('name', 'Testlang');\n    expect(country).to.have.property('continent');\n    expect(country.continent).to.have.property('code', 'EU');\n    expect(country.continent).to.have.property('name', 'TestEU');\n  });\n});",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'createCountry')",
                "estack": "TypeError: Cannot read properties of null (reading 'createCountry')\n    at Context.eval (webpack://demoblaze-automation-cypress/./cypress/e2e/apitest/apimulationtest.cy.js:16:51)",
                "diff": null
              },
              "uuid": "1b4c461a-8f7b-4425-831f-152855c989d5",
              "parentUUID": "7d6114f9-6487-4d23-8d20-a326822c8a1f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1b4c461a-8f7b-4425-831f-152855c989d5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 959,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true,
        "reportFilename": "report"
      },
      "version": "6.2.0"
    }
  }
}